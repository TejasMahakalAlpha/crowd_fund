"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactSwap = void 0;

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var noop = function noop() {};

var ReactSwap =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ReactSwap, _React$Component);

  function ReactSwap(props) {
    var _this;

    _classCallCheck(this, ReactSwap);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ReactSwap).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "onClick", function (event) {
      // Should react on click only on [data-swap-handler="1"] elements
      var dataHandler = _this.props.dataHandler;

      if (!event.target.dataset[dataHandler]) {
        return;
      }

      event.preventDefault();
      event.stopPropagation();

      _this.swap();
    });

    _defineProperty(_assertThisInitialized(_this), "setTimer", function (callback, timeout) {
      if (!timeout) {
        callback();
        return;
      }

      _this.timer = setTimeout(callback, timeout);
    });

    _defineProperty(_assertThisInitialized(_this), "change", function (value) {
      var onSwap = _this.props.onSwap;

      _this.setState({
        isSwapped: value
      }, function () {
        return onSwap(value);
      });
    });

    _defineProperty(_assertThisInitialized(_this), "clearTimer", function () {
      var delay = _this.props.delay;

      if (delay) {
        clearTimeout(_this.timer);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "expand", function () {
      _this.change(true);

      _this.clearTimer();
    });

    _defineProperty(_assertThisInitialized(_this), "hide", function () {
      var delay = _this.props.delay;

      _this.setTimer(function () {
        return _this.change(false);
      }, delay);
    });

    _defineProperty(_assertThisInitialized(_this), "swap", function () {
      var isSwapped = _this.state.isSwapped;

      if (isSwapped) {
        _this.hide();
      } else {
        _this.expand();
      }
    });

    var _isSwapped = props.isSwapped;
    _this.state = {
      isSwapped: Boolean(_isSwapped)
    };
    return _this;
  }

  _createClass(ReactSwap, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(_ref) {
      var prevIsSwapped = _ref.isSwapped;
      var nextIsSwapped = this.props.isSwapped;

      if (prevIsSwapped !== nextIsSwapped && typeof nextIsSwapped !== 'undefined') {
        // eslint-disable-next-line react/no-did-update-set-state
        this.setState({
          isSwapped: nextIsSwapped
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.clearTimer();
    }
  }, {
    key: "render",
    value: function render() {
      var isSwapped = this.state.isSwapped;
      var _this$props = this.props,
          children = _this$props.children,
          isHover = _this$props.isHover;
      var content = isSwapped ? children[1] : children[0];
      var props = isHover ? {
        onMouseLeave: this.hide,
        onMouseEnter: this.expand
      } : {
        onClick: this.onClick
      };
      return _react["default"].cloneElement(content, props);
    }
  }]);

  return ReactSwap;
}(_react["default"].Component);

exports.ReactSwap = ReactSwap;

_defineProperty(ReactSwap, "defaultProps", {
  isHover: false,
  isSwapped: false,
  delay: 0,
  dataHandler: 'swapHandler',
  onSwap: noop
});